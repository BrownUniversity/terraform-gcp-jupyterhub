name: kitchen-tests

on: [workflow_dispatch]

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2

      - name: Build Image
        if: steps.filter.outputs.all == 'true' && !contains(github.event.commits[0].message, '[skip docker]')
        run: docker build . --file Dockerfile --tag "${{ github.event.repository.name }}" --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log into registry
        if: steps.filter.outputs.all == 'true' && !contains(github.event.commits[0].message, '[skip docker]')
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to gh packages
        id: upload
        if: steps.filter.outputs.all == 'true' && !contains(github.event.commits[0].message, '[skip docker]')
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=latest
          echo VERSION=$VERSION
          echo IMAGE_ID=$IMAGE_ID
          docker tag ${{ github.event.repository.name }} $IMAGE_ID:${VERSION}
          docker push $IMAGE_ID:$VERSION
  test:
    needs: [docker]
    runs-on: self-hosted
    container:
      image: ghcr.io/brownuniversity/terraform-gcp-jupyterhub:latest
    steps:
    - uses: actions/checkout@v2
      with:
        clean: false #this is to avoid permissions on self-hosted runner
    - name: Pre-check dirty dirs in self-hosted
      run: |
        ls -la ~
        ls -la .
        ls -la examples/sample-jhub
        ls -la examples/sample-jhub-nfs
    - name: Remove Kitchen File
      run: |
        rm -rf .kitchen
        rm -rf examples/*/.terraform
        rm -rf examples/*/terraform.tfstate*
    - name: Create Credential File
      run: |
        echo "$GCP_CREDENTIAL_JSON" | base64 -d > /tmp/credentials.json
      env:
        GCP_CREDENTIAL_JSON: ${{ secrets.GCP_CREDENTIAL_JSON}}
    - name: Create TLS Files
      run: |
        echo "$JUPYTERHUB_TLS_CER" > /tmp/tls.cer
        echo "$JUPYTERHUB_TLS_KEY" > /tmp/tls.key
      env:
        JUPYTERHUB_TLS_CER: ${{ secrets.JUPYTERHUB_TLS_CER }}
        JUPYTERHUB_TLS_KEY: ${{ secrets.JUPYTERHUB_TLS_KEY }}
    - name: Authorize service account
      run: gcloud auth activate-service-account ${{ secrets.GCP_PF_SA }} --key-file=/tmp/credentials.json
      env:
        KUBECONFIG: /tmp/kube_config
    - name: Run Kitchen
      run: kitchen test
      env:
        TF_VAR_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT }}
        TF_VAR_org_id: ${{ secrets.GCP_ORG_ID }}
        TF_VAR_folder_id: ${{ secrets.GCP_CCV_CI_FOLDER_ID }}
        INFOBLOX_USERNAME: ${{ secrets.INFOBLOX_JHUB_USER }}
        INFOBLOX_PASSWORD: ${{ secrets.INFOBLOX_JHUB_PSWD }}
        INFOBLOX_SERVER: ${{secrets.INFOBLOX_JHUB_HOST}}
        TF_VAR_site_certificate_file: /tmp/tls.cer
        TF_VAR_site_certificate_key_file: /tmp/tls.key
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/credentials.json
        KUBECONFIG: /tmp/kube_config
    - name: Clean kitchen and terraform files
      run: |
        rm -rf .kitchen
        rm -rf examples/*/.terraform
        rm -rf examples/*/terraform.tfstate*
    - name: Post-check dirty dirs in self-hosted
      run: |
        ls -la .
        ls -la examples/sample-jhub
        ls -la examples/sample-jhub-nfs
        ls -la ~
  
  # Clean up dangling images in self-hosted runner to avoid filling up docker disk 
  docker-cleanup:
    needs: [test]
    runs-on: self-hosted 
    steps:
    - name: Clean up docker images
      run: |
        docker images --filter=reference='brownccv/kitchen-terraform'
        docker images --filter=reference='brownccv/kitchen-terraform' --filter "dangling=true" | grep -E "brownccv/kitchen-terraform" | awk '{ print $3 }' | xargs docker rmi || :
        echo "After cleanup"
        docker images --filter=reference='brownccv/kitchen-terraform'